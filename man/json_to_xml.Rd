% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json2xml.R
\name{json_to_xml}
\alias{json_to_xml}
\title{Convert JSON to XML}
\usage{
json_to_xml(doc, spaces = 0, compact = TRUE, fullTagEmptyElement = FALSE,
  indentCdata = FALSE, indentAttributes = FALSE,
  ignoreDeclaration = FALSE, ignoreInstruction = FALSE,
  ignoreAttributes = FALSE, ignoreComment = FALSE, ignoreCdata = FALSE,
  ignoreDoctype = FALSE, ignoreText = FALSE)
}
\arguments{
\item{doc}{JSON document (character)}

\item{spaces}{Number of spaces to be used for indenting JSON output. Default: \code{0}.}

\item{compact}{WWhether the \emph{input} object is in compact form or not. Default \code{TRUE}.}

\item{fullTagEmptyElement}{Whether to produce element without sub-elements as full tag pairs. Default \code{FALSE}}

\item{indentCdata}{Whether to write CData in a new line and indent it. Default \code{FALSE}}

\item{indentAttributes}{Whether to print attributes across multiple lines and indent them (when spaces is not 0). Default \code{FALSE}}

\item{ignoreDeclaration}{Whether to ignore writing declaration directives of xml.  Default \code{FALSE}}

\item{ignoreInstruction}{Whether to ignore writing processing instruction of xml.  Default \code{FALSE}}

\item{ignoreAttributes}{Whether to ignore writing attributes of the elements.  Default \code{FALSE}}

\item{ignoreComment}{Whether to ignore writing comments of the elements. Default \code{FALSE}}

\item{ignoreCdata}{Whether to ignore writing CData of the elements.  Default \code{FALSE}}

\item{ignoreDoctype}{Whether to ignore writing Doctype of the elements.  Default \code{FALSE}}

\item{ignoreText}{Whether to ignore writing texts of the elements.  Default \code{FALSE}}
}
\description{
Please reconsider your apparent desire to use this function.\cr
\cr
Automagic conversion of JSON to XML is \emph{rarely} a good idea and a path fraught
with peril. There are \emph{so many} options to tweak to ensure you get what you think
you want but likely truly want something else entirely, such as a more minimal
extract of the original JSON file.\cr
\cr
Seriously consider parsing the JSON then using \code{purrr} idioms to extract the data
you need into a proper \code{list} and \emph{then} call \code{\link[xml2:as_xml_document]{xml2::as_xml_document()}} on said \code{list}.
}
\note{
the \code{compact} parameter should nigh always be \code{TRUE}.
}
\examples{
json_to_xml(jsonlite::toJSON(head(mtcars, 2)), spaces=2)
}
